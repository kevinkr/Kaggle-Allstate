source('~/GitHub/kaggle-allstate/Code/1-load data.R', echo=TRUE)
cat.var <- names(train)[which(sapply(train, is.factor))]
test.cat.var <- names(test)[which(sapply(test, is.factor))]
train.cat <- train[,1:116]
test.cat <- test[,1:116]
# manually adjust factors after reviewing boxplot
levels(train$cat98)[levels(train$cat98)=="D"] <- "A"
levels(train$cat109)[levels(train$cat109)=="BD"] <- "T"
levels(train$cat110)[levels(train$cat110)=="DJ"] <- "AR"
levels(train$cat111)[levels(train$cat111)=="O"] <- "M"
levels(train$cat112)[levels(train$cat112)=="AY"] <- "AA"
levels(train$cat112)[levels(train$cat112)=="X"] <- "M"
levels(train$cat112)[levels(train$cat112)=="C"] <- "G"
levels(train$cat113)[levels(train$cat113)=="AO"] <- "J"
levels(train$cat115)[levels(train$cat115)=="N"] <- "K"
levels(train$cat116)[levels(train$cat116)=="LO"] <- "MD"
levels(train$cat116)[levels(train$cat116)=="EL"] <- "GI"
levels(train$cat116)[levels(train$cat116)=="BP"] <- "FB"
levels(train$cat116)[levels(train$cat116)=="JW"] <- "AC"
levels(train$cat116)[levels(train$cat116)=="HN"] <- "L"
levels(test$cat98)[levels(test$cat98)=="D"] <- "A"
levels(test$cat109)[levels(test$cat109)=="BD"] <- "T"
levels(test$cat110)[levels(test$cat110)=="DJ"] <- "AR"
levels(test$cat111)[levels(test$cat111)=="O"] <- "M"
levels(test$cat112)[levels(test$cat112)=="AY"] <- "AA"
levels(test$cat112)[levels(test$cat112)=="X"] <- "M"
levels(test$cat112)[levels(test$cat112)=="C"] <- "G"
levels(test$cat113)[levels(test$cat113)=="AO"] <- "J"
levels(test$cat115)[levels(test$cat115)=="N"] <- "K"
levels(test$cat116)[levels(test$cat116)=="LO"] <- "MD"
levels(test$cat116)[levels(test$cat116)=="EL"] <- "GI"
levels(test$cat116)[levels(test$cat116)=="BP"] <- "FB"
levels(test$cat116)[levels(test$cat116)=="JW"] <- "AC"
levels(test$cat116)[levels(test$cat116)=="HN"] <- "L"
######
# category reduction fucntion
######
# inputs category name, cutoff value
reduce_cats <- function(cat.name, cutoff.val) {
prop.table <- sort(prop.table(table(train[[cat.name]])), decreasing = T)
#return(proptable)
weak.prop.table <- prop.table < cutoff.val
#return(weak.prop.table)
# grab the names
weak.prop.names <- names(prop.table[prop.table < 0.01])
return(weak.prop.names)
}
############full loop attempt
for (n in cat.var) {
#print(n)
# call function to return category names for reduction, number is cutoff val
#weak.prop.names <- reduce_cats(cat.name, 0.01)
weak.prop.names <- reduce_cats(n, 0.01)
# filter data set by categories that are in the weak prop names vector using %in% search'
# first convert to character
train[[n]] <- as.character(train[[n]])
train[train[[n]] %in% weak.prop.names, n] <- "OTHER"
train[[n]] <- as.factor(train[[n]])
}
####
# test version
#####
reduce_cats <- function(cat.name, cutoff.val) {
prop.table <- sort(prop.table(table(test[[cat.name]])), decreasing = T)
#return(proptable)
weak.prop.table <- prop.table < cutoff.val
#return(weak.prop.table)
# grab the names
weak.prop.names <- names(prop.table[prop.table < 0.01])
return(weak.prop.names)
}
############full loop attempt
for (n in test.cat.var) {
#print(n)
# call function to return category names for reduction, number is cutoff val
#weak.prop.names <- reduce_cats(cat.name, 0.01)
weak.prop.names <- reduce_cats(n, 0.01)
# filter data set by categories that are in the weak prop names vector using %in% search'
# first convert to character
test[[n]] <- as.character(test[[n]])
test[test[[n]] %in% weak.prop.names, n] <- "OTHER"
test[[n]] <- as.factor(test[[n]])
}
library(factoextra)
library(FactoMineR)
par(mfrow=c(4,3))
for (i in 1:ncol(train.cat)) {
plot(train[[i]], main=colnames(train)[i],
ylab = "Count", col="steelblue", las = 2)
}
test$loss <- NA
test$isTest <- rep(1,nrow(test))
train$isTest <- rep(0,nrow(train))
#bind train and test
fullSet <- rbind(test,train)
# set factor levels all full set
fullSet <- fullSet %>% mutate_each(funs(factor), starts_with("cat"))
# split back into test and train
test <- fullSet[fullSet$isTest==1,]
train <- fullSet[fullSet$isTest==0,]
# drop loss from test set
test <- subset(test, select = -c(loss))
test <- subset(test, select = -c(isTest))
train <- subset(train, select = -c(isTest))
savehistory("~/GitHub/kaggle-allstate/Models/random forest/rf-eda-steps.Rhistory")
